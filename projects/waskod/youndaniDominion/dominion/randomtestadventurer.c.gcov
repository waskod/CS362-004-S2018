        -:    0:Source:randomtestadventurer.c
        -:    0:Graph:randomtestadventurer.gcno
        -:    0:Data:randomtestadventurer.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <string.h>
        -:    5:#include <stdlib.h>
        -:    6:#include <assert.h>
        -:    7:#include <stdio.h>
        -:    8:#include <time.h>
        -:    9:#include <math.h>
        -:   10:
        -:   11:// fail counter variables
        -:   12:int deckFailCount = 0;
        -:   13:int shuffleFailCount = 0;
        -:   14:int treasureFailCount = 0;
        -:   15:int effectFailCount = 0;
        -:   16:int drawFailCount = 0;
        -:   17:
        -:   18:// function to check the adventurerCard
    10000:   19:void checkAdventurerEffect(int player, struct gameState *postEffect)
        -:   20:{
        -:   21:
        -:   22:	// creating a variable to keep track of the state before we change things
        -:   23:	struct gameState preEffect;
    10000:   24:	memcpy(&preEffect, postEffect, sizeof(struct gameState));
        -:   25:
        -:   26:	int temphand[MAX_HAND];
        -:   27:
    10000:   28:	int postEffectTreasure = 0;
    10000:   29:	int preEffectTreasure = 0;
    10000:   30:	int drawntreasure = 0;
        -:   31:	int cardDrawn, card;
    10000:   32:	int bonus = 0;
        -:   33:	int shuffleRes, drawRes;
        -:   34:	int i;
    10000:   35:	int j = 0;
        -:   36:
    10000:   37:	int effectRes = cardEffect(adventurer, 0, 0, 0, postEffect, 0, &bonus);
    10000:   38:	if (effectRes)
    #####:   39:		effectFailCount++;
        -:   40:
  1282778:   41:	while (drawntreasure < 2)
        -:   42:	{
  1262778:   43:		if (preEffect.deckCount[player] < 1)
        -:   44:		{
    #####:   45:			shuffleRes = shuffle(player, &preEffect);
    #####:   46:			if (shuffleRes == -1 && preEffect.deckCount[player] >= 1)
    #####:   47:				shuffleFailCount++;
        -:   48:		}
        -:   49:
  1262778:   50:		drawRes = drawCard(player, &preEffect);
        -:   51:
  1262778:   52:		if (drawRes == -1 && preEffect.deckCount[player] != 0)
    #####:   53:			drawFailCount++;
        -:   54:
  1262778:   55:		cardDrawn = preEffect.hand[player][preEffect.handCount[player] - 1];
        -:   56:
  1262778:   57:		if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
    20000:   58:			drawntreasure++;
        -:   59:		else
        -:   60:		{
  1242778:   61:			temphand[j] = cardDrawn;
  1242778:   62:			preEffect.handCount[player]--;
  1242778:   63:			j++;
        -:   64:		}
        -:   65:	}
        -:   66:
  1262778:   67:	while (j - 1 >= 0)
        -:   68:	{
  1242778:   69:		preEffect.discard[player][preEffect.discardCount[player]++] = temphand[j - 1];
  1242778:   70:		j = j - 1;
        -:   71:	}
        -:   72:
  2535437:   73:	for (i = 0; i < postEffect->handCount[player]; i++)
        -:   74:	{
  2525437:   75:		card = postEffect->hand[player][i];
  2525437:   76:		if (card == copper || card == silver || card == gold)
    20000:   77:			postEffectTreasure++;
        -:   78:	}
        -:   79:
  2535437:   80:	for (i = 0; i < preEffect.handCount[player]; i++)
        -:   81:	{
  2525437:   82:		card = preEffect.hand[player][i];
  2525437:   83:		if (card == copper || card == silver || card == gold)
    20000:   84:			preEffectTreasure++;
        -:   85:	}
        -:   86:
    10000:   87:	if (postEffectTreasure != preEffectTreasure)
    #####:   88:		treasureFailCount++;
        -:   89:
    10000:   90:	int postEffectHandCount = postEffect->handCount[player];
    10000:   91:	int postEffectDeckCount = postEffect->deckCount[player];
    10000:   92:	int postEffectDiscardCount = postEffect->discardCount[player];
        -:   93:
    10000:   94:	int preEffectHandCount = preEffect.handCount[player];
    10000:   95:	int preEffectDeckCount = preEffect.deckCount[player];
    10000:   96:	int preEffectDiscardCount = preEffect.discardCount[player];
        -:   97:
    10000:   98:	if (!(postEffectHandCount == preEffectHandCount && postEffectDeckCount == preEffectDeckCount && postEffectDiscardCount == preEffectDiscardCount))
    #####:   99:		deckFailCount++;
    10000:  100:}
        -:  101:
        1:  102:int main()
        -:  103:{
        1:  104:	printf("Begining Test for Adventurer:\n");
        1:  105:	srand(time(NULL));
        -:  106:
        1:  107:	int treasures[] = {copper, silver, gold};
        -:  108:
        -:  109:	int i, k, player;
        -:  110:	struct gameState myGameState;
        -:  111:	int numTreasures;
        1:  112:	int numIterations = 10000;
        1:  113:	int min = 3;
        -:  114:
    10001:  115:	for (i = 0; i < numIterations; i++)
        -:  116:	{
263010000:  117:		for (k = 0; k < sizeof(struct gameState); k++)
263000000:  118:			((char *)&myGameState)[k] = floor(Random() * 256);
        -:  119:
    10000:  120:		player = floor(Random() * MAX_PLAYERS);
    10000:  121:		myGameState.deckCount[player] = floor(Random() * ((MAX_DECK - min) + 1) + min);
    10000:  122:		numTreasures = floor(Random() * ((myGameState.deckCount[player] - min) + 1) + min);
        -:  123:
  1271160:  124:		for (k = 0; k < numTreasures; k++)
  1261160:  125:			myGameState.deck[player][k] = treasures[rand() % 3];
        -:  126:
    10000:  127:		myGameState.discardCount[player] = 0;
    10000:  128:		myGameState.handCount[player] = floor(Random() * ((MAX_HAND - min) + 1) + min);
    10000:  129:		myGameState.whoseTurn = player;
        -:  130:
    10000:  131:		checkAdventurerEffect(player, &myGameState);
        -:  132:	}
        -:  133:
        1:  134:	int failCount = effectFailCount + drawFailCount + shuffleFailCount + deckFailCount + treasureFailCount;
        -:  135:
        1:  136:	printf("Total Tests: %d\n", numIterations);
        1:  137:	printf("Tests Passed: %d\n", numIterations - failCount);
        1:  138:	printf("Tests Failed: %d\n", failCount);
        -:  139:
        1:  140:	if (failCount == 0)
        1:  141:		printf("Passed All Tests!\n\n");
        -:  142:
        1:  143:	printf("Effect Fails: %d\n", effectFailCount);
        1:  144:	printf("Card Draw fails: %d\n", drawFailCount);
        1:  145:	printf("Shuffle Fails: %d\n", shuffleFailCount);
        1:  146:	printf("Hand/Deck Count Fails: %d\n", deckFailCount);
        1:  147:	printf("Treasure Count Fails: %d\n", treasureFailCount);
        -:  148:
        1:  149:	printf("\n=================================== Code Coverage ==================================\n\n");
        1:  150:	return 0;
        -:  151:}
