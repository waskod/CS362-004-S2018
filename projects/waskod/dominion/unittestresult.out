
=============== Begin Testing Update Coins ===================

----- Testing Hand of All Copper -----

Expecting 10 Copper Coins
Actual Ammount: 0
Copper Test: failed

----- Testing Hand of All Silver -----

Expecting 10 Silver Coins
Actual Ammount: 0
Silver Test: failed

----- Testing Hand of All Gold -----

Expecting 10 Gold Coins
Actual Ammount: 0
Gold Test: failed

----- Testing Hand of No Coins -----

Expecting 0 Coins
Actual Ammount: 0
None Test: Passed

=============== End Testing Update Coins ===================
File 'unittest1.c'
Lines executed:90.24% of 41
Creating 'unittest1.c.gcov'

        -:    0:Source:unittest1.c
        -:    0:Graph:unittest1.gcno
        -:    0:Data:unittest1.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:// Unit test 1 for dominion.c function: updateCoins
        -:    2:#include "dominion.h"
        -:    3:#include "dominion_helpers.h"
        -:    4:#include "rngs.h"
        -:    5:#include <string.h>
        -:    6:#include <stdio.h>
        -:    7:#include <math.h>
        -:    8:#include <stdlib.h>
        -:    9:#include <assert.h>
        -:   10:
        -:   11:
        1:   12:int main (int argc, char** argv)	
        -:   13:{
        -:   14:	struct gameState myGameState;
        1:   15:	myGameState.coins = 0;
        -:   16:	int i;
        -:   17:	
        1:   18:	printf("\n=============== Begin Testing Update Coins ===================\n");
        -:   19:	
        1:   20:	printf("\n----- Testing Hand of All Copper -----\n");
       11:   21:	for(i=0; i < 10; i++)
        -:   22:	{
       10:   23:		myGameState.hand[0][i] = copper;
        -:   24:	}
        -:   25:	
        1:   26:	updateCoins(0,&myGameState, 0);
        -:   27:	
        1:   28:	printf("\nExpecting 10 Copper Coins\n");
        1:   29:	printf("Actual Ammount: %d\n", myGameState.coins);
        -:   30:	
        1:   31:	if(myGameState.coins == 10)
    #####:   32:		printf("Copper Test: Passed\n");
        -:   33:	else
        1:   34:		printf("Copper Test: failed\n");
        -:   35:	
        1:   36:	printf("\n----- Testing Hand of All Silver -----\n");
       11:   37:	for(i=0; i < 10; i++)
        -:   38:	{
       10:   39:		myGameState.hand[0][i] = silver;
        -:   40:	}
        -:   41:	
        1:   42:	updateCoins(0,&myGameState, 0);
        -:   43:	
        1:   44:	printf("\nExpecting 10 Silver Coins\n");
        1:   45:	printf("Actual Ammount: %d\n", myGameState.coins);
        -:   46:	
        1:   47:	if(myGameState.coins == 10)
    #####:   48:		printf("Silver Test: Passed\n");
        -:   49:	else
        1:   50:		printf("Silver Test: failed\n");
        -:   51:	
        1:   52:	printf("\n----- Testing Hand of All Gold -----\n");
       11:   53:	for(i=0; i < 10; i++)
        -:   54:	{
       10:   55:		myGameState.hand[0][i] = gold;
        -:   56:	}
        -:   57:	
        1:   58:	updateCoins(0,&myGameState, 0);
        -:   59:	
        1:   60:	printf("\nExpecting 10 Gold Coins\n");
        1:   61:	printf("Actual Ammount: %d\n", myGameState.coins);
        -:   62:	
        1:   63:	if(myGameState.coins == 10)
    #####:   64:		printf("Gold Test: Passed\n");
        -:   65:	else
        1:   66:		printf("Gold Test: failed\n");
        -:   67:	
        1:   68:	printf("\n----- Testing Hand of No Coins -----\n");
       11:   69:	for(i=0; i < 10; i++)
        -:   70:	{
       10:   71:		myGameState.hand[0][i] = smithy;
        -:   72:	}
        -:   73:
        1:   74:	updateCoins(0,&myGameState, 0);
        -:   75:	
        1:   76:	printf("\nExpecting 0 Coins\n");
        1:   77:	printf("Actual Ammount: %d\n", myGameState.coins);
        -:   78:	
        1:   79:	if(myGameState.coins == 0)
        1:   80:		printf("None Test: Passed\n");
        -:   81:	else
    #####:   82:		printf("None Test: failed\n");
        -:   83:	
        1:   84:	printf("\n=============== End Testing Update Coins ===================\n");
        -:   85:
        1:   86:	return 0;
        -:   87:}

=============== Begin Testing Buy Card===================
----- Testing Plenty of Coins -----
Starting Coins: 10
Expected Remaining Coins: 8
Actual Remaining Coins: 10
Starting BuyCount: 2
Expected Remaining BuyCount: 1
Actual Remaining BuyCount: 2
Should purchase be accepted? YES
Denied
----- Testing too few coins -----
Starting Coins: 0
Expected Remaining Coins: 0
Actual Remaining Coins: 0
Starting BuyCount: 2
Expected Remaining BuyCount: 1
Actual Remaining BuyCount: 2
Should purchase be accepted? NO
Denied
----- Testing exact amount -----
Starting Coins: 2
Expected Remaining Coins: 0
Actual Remaining Coins: 2
Starting BuyCount: 2
Expected Remaining BuyCount: 1
Actual Remaining BuyCount: 2
Should purchase be accepted? YES
Denied
----- Testing insufficient buy ammount, enough coins -----
Starting Coins: 10
Expected Remaining Coins: 10
Actual Remaining Coins: 10
Starting BuyCount: 0
Expected Remaining BuyCount: 0
Actual Remaining BuyCount: 0
Should purchase be accepted? NO
Denied
----- Testing insufficient buy ammount, insufficient coins -----
Starting Coins: 0
Expected Remaining Coins: 0
Actual Remaining Coins: 0
Starting BuyCount: 0
Expected Remaining BuyCount: 0
Actual Remaining BuyCount: 0
Should purchase be accepted? NO
Denied

=============== End Testing Buy Card===================
File 'unittest2.c'
Lines executed:93.24% of 74
Creating 'unittest2.c.gcov'

        -:    0:Source:unittest2.c
        -:    0:Graph:unittest2.gcno
        -:    0:Data:unittest2.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:// Unit test 2 for dominion.c function: buyCard
        -:    2:#include "dominion.h"
        -:    3:#include "dominion_helpers.h"
        -:    4:#include "rngs.h"
        -:    5:#include <string.h>
        -:    6:#include <stdio.h>
        -:    7:#include <math.h>
        -:    8:#include <stdlib.h>
        -:    9:#include <assert.h>
        -:   10:
        -:   11:
        1:   12:int main (int argc, char** argv)	
        -:   13:{
        1:   14:	printf("\n=============== Begin Testing Buy Card===================\n");
        -:   15:	struct gameState myGameState;
        -:   16:	int testResult;
        -:   17:	
        -:   18:	
        1:   19:	printf("----- Testing Plenty of Coins -----\n");
        1:   20:	myGameState.coins = 10;
        1:   21:	myGameState.numBuys = 2;
        1:   22:	testResult = buyCard(2, &myGameState);
        -:   23:		
        1:   24:		printf("Starting Coins: 10\n");
        1:   25:		printf("Expected Remaining Coins: 8\n");
        1:   26:		printf("Actual Remaining Coins: %d\n", myGameState.coins);
        -:   27:		
        1:   28:		printf("Starting BuyCount: 2\n");
        1:   29:		printf("Expected Remaining BuyCount: 1\n");
        1:   30:		printf("Actual Remaining BuyCount: %d\n", myGameState.numBuys);
        -:   31:		
        1:   32:		printf("Should purchase be accepted? YES\n");
        -:   33:		
        1:   34:		if(testResult == 0)
    #####:   35:			printf("Accepted\n");
        -:   36:		else
        1:   37:			printf("Denied\n");
        -:   38:		
        -:   39:	
        1:   40:	printf("----- Testing too few coins -----\n");
        -:   41:	
        1:   42:	myGameState.coins = 0;
        1:   43:	myGameState.numBuys = 2;
        1:   44: 	testResult = buyCard(2, &myGameState);
        -:   45:	
        1:   46:	printf("Starting Coins: 0\n");
        1:   47:	printf("Expected Remaining Coins: 0\n");
        1:   48:	printf("Actual Remaining Coins: %d\n", myGameState.coins);
        -:   49:		
        1:   50:	printf("Starting BuyCount: 2\n");
        1:   51:	printf("Expected Remaining BuyCount: 1\n");
        1:   52:	printf("Actual Remaining BuyCount: %d\n", myGameState.numBuys);
        -:   53:		
        1:   54:	printf("Should purchase be accepted? NO\n");
        -:   55:		
        1:   56:	if(testResult == 0)
    #####:   57:		printf("Accepted\n");
        -:   58:	else
        1:   59:		printf("Denied\n");
        -:   60:				
        -:   61:		
        1:   62: 	printf("----- Testing exact amount -----\n");
        -:   63:	
        1:   64:	myGameState.coins = 2;
        1:   65:	myGameState.numBuys = 2;
        1:   66: 	testResult = buyCard(2, &myGameState);
        -:   67:	
        1:   68:	printf("Starting Coins: 2\n");
        1:   69:	printf("Expected Remaining Coins: 0\n");
        1:   70:	printf("Actual Remaining Coins: %d\n", myGameState.coins);
        -:   71:		
        1:   72:	printf("Starting BuyCount: 2\n");
        1:   73:	printf("Expected Remaining BuyCount: 1\n");
        1:   74:	printf("Actual Remaining BuyCount: %d\n", myGameState.numBuys);
        -:   75:		
        1:   76:	printf("Should purchase be accepted? YES\n");
        -:   77:		
        1:   78:	if(testResult == 0)
    #####:   79:		printf("Accepted\n");
        -:   80:	else
        1:   81:		printf("Denied\n");
        -:   82:				
        -:   83:		
        -:   84:		
        1:   85:	printf("----- Testing insufficient buy ammount, enough coins -----\n");
        -:   86:	
        1:   87:	myGameState.coins = 10;
        1:   88:	myGameState.numBuys = 0;
        1:   89: 	testResult = buyCard(2, &myGameState);
        -:   90:	
        1:   91:	printf("Starting Coins: 10\n");
        1:   92:	printf("Expected Remaining Coins: 10\n");
        1:   93:	printf("Actual Remaining Coins: %d\n", myGameState.coins);
        -:   94:		
        1:   95:	printf("Starting BuyCount: 0\n");
        1:   96:	printf("Expected Remaining BuyCount: 0\n");
        1:   97:	printf("Actual Remaining BuyCount: %d\n", myGameState.numBuys);
        -:   98:		
        1:   99:	printf("Should purchase be accepted? NO\n");
        -:  100:		
        1:  101:	if(testResult == 0)
    #####:  102:		printf("Accepted\n");
        -:  103:	else
        1:  104:		printf("Denied\n");
        -:  105:
        1:  106:	printf("----- Testing insufficient buy ammount, insufficient coins -----\n");
        -:  107:	
        1:  108:	myGameState.coins = 0;
        1:  109:	myGameState.numBuys = 0;
        1:  110: 	testResult = buyCard(2, &myGameState);
        -:  111:	
        1:  112:	printf("Starting Coins: 0\n");
        1:  113:	printf("Expected Remaining Coins: 0\n");
        1:  114:	printf("Actual Remaining Coins: %d\n", myGameState.coins);
        -:  115:		
        1:  116:	printf("Starting BuyCount: 0\n");
        1:  117:	printf("Expected Remaining BuyCount: 0\n");
        1:  118:	printf("Actual Remaining BuyCount: %d\n", myGameState.numBuys);
        -:  119:		
        1:  120:	printf("Should purchase be accepted? NO\n");
        -:  121:		
        1:  122:	if(testResult == 0)
    #####:  123:		printf("Accepted\n");
        -:  124:	else
        1:  125:		printf("Denied\n");
        -:  126:		
        1:  127:	printf("\n=============== End Testing Buy Card===================\n");
        -:  128:	
        1:  129: 	return 0;	
        -:  130:}

=============== Begin Testing is Game Over ===================
Expected result: game is not over
Actual Result: game is not over
=============== End Testing is Game Over ===================
File 'unittest3.c'
Lines executed:90.91% of 11
Creating 'unittest3.c.gcov'

        -:    0:Source:unittest3.c
        -:    0:Graph:unittest3.gcno
        -:    0:Data:unittest3.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:// Unit test 3 for dominion.c function: isGameOver
        -:    2:#include "dominion.h"
        -:    3:#include "dominion_helpers.h"
        -:    4:#include "rngs.h"
        -:    5:#include <string.h>
        -:    6:#include <stdio.h>
        -:    7:#include <math.h>
        -:    8:#include <stdlib.h>
        -:    9:#include <assert.h>
        -:   10:
        -:   11:
        1:   12:int main(int argc, char** argv)
        -:   13:{
        1:   14:	printf("\n=============== Begin Testing is Game Over ===================\n");
        -:   15:	
        -:   16:	struct gameState myGameState;
        1:   17:	int cards[10] = { adventurer, gardens, embargo, village, minion, mine, cutpurse, sea_hag, tribute, smithy };
        1:   18:	int foo = initializeGame(2, cards, 3, &myGameState);
        1:   19:	int testResult = isGameOver(&myGameState);
        1:   20:	printf("Expected result: game is not over\n");
        1:   21:	if(testResult == 0)
        1:   22:		printf("Actual Result: game is not over");
        -:   23:	else
    #####:   24:		printf("Actual Result: game is over");
        -:   25:
        1:   26:	printf("\n=============== End Testing is Game Over ===================\n");
        1:   27:	return 0;
        -:   28:} 

=============== Begin Test Whose Turn ===================
Expected Result: 3 rounds of turns
round: 1
round: 2
round: 3

=============== End Test Whose Turn ===================
File 'unittest4.c'
Lines executed:100.00% of 11
Creating 'unittest4.c.gcov'

        -:    0:Source:unittest4.c
        -:    0:Graph:unittest4.gcno
        -:    0:Data:unittest4.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:// Unit test 4 for dominion.c function: 
        -:    2:#include "dominion.h"
        -:    3:#include "dominion_helpers.h"
        -:    4:#include "rngs.h"
        -:    5:#include <string.h>
        -:    6:#include <stdio.h>
        -:    7:#include <math.h>
        -:    8:#include <stdlib.h>
        -:    9:#include <assert.h>
        -:   10:
        -:   11:
        1:   12:int main (int argc, char** argv)	
        -:   13:{
        1:   14:	printf("\n=============== Begin Test Whose Turn ===================\n");
        -:   15:    struct gameState myGameState;
        -:   16:    int testResult;
        1:   17:	int cards[10] = {adventurer, gardens, minion, village, embargo, mine, cutpurse, baron, tribute, smithy};
        -:   18:	
        1:   19:	printf("Expected Result: 3 rounds of turns\n");
        -:   20:	
        -:   21:	int i;
        4:   22:    for (i = 1 ; i < 4 ; i++)
        -:   23:	{
        3:   24:        testResult = initializeGame(2, cards, 5, &myGameState);
        3:   25:        testResult = whoseTurn(&myGameState);
        3:   26:        assert(testResult == myGameState.whoseTurn);
        3:   27:		printf("round: %d\n", i);
        -:   28:	}
        1:   29:	printf("\n=============== End Test Whose Turn ===================\n");
        -:   30:
        1:   31:	return 0;
        -:   32:}
